1
00:00:18,545 --> 00:00:19,220
大家好

2
00:00:19,220 --> 00:00:23,133
这里是FiveYellowMice给大家带来的
“小白也能学会的Galgame制作”的第4讲

3
00:00:23,523 --> 00:00:24,734
正如你之前所看到的

4
00:00:24,834 --> 00:00:27,156
这一讲我们来要学习如何放置人物立绘

5
00:00:27,728 --> 00:00:30,188
我们来看一下0.txt中所写的内容

6
00:00:30,699 --> 00:00:31,570
首先第一行

7
00:00:31,670 --> 00:00:33,466
有一个半角分号加mode800

8
00:00:33,880 --> 00:00:34,869
这是一个特殊的标记

9
00:00:34,869 --> 00:00:36,364
必须被放在脚本的第一行

10
00:00:36,705 --> 00:00:39,466
哪怕是这样在上面空出一行也不行

11
00:00:39,844 --> 00:00:42,632
这个标记的意思是让游戏的分辨率变成600x800

12
00:00:42,732 --> 00:00:44,061
记住 加上了这个

13
00:00:44,161 --> 00:00:46,302
我们的游戏的分辨率就变成了800x600

14
00:00:46,941 --> 00:00:47,627
然后往下看

15
00:00:48,844 --> 00:00:51,269
你会发现这些命令都是我们已经学过的了

16
00:00:51,369 --> 00:00:52,601
除了一行字

17
00:00:52,701 --> 00:00:53,742
ld命令

18
00:00:53,842 --> 00:00:55,160
这个命令是干什么的呢？

19
00:00:55,260 --> 00:00:57,056
我们来回想一下刚刚游戏中的过程

20
00:00:57,156 --> 00:00:58,257
在这两句话之间

21
00:00:58,357 --> 00:00:59,559
有一张立绘出现了

22
00:00:59,659 --> 00:01:02,144
所以ld命令的用处就是显示一张立绘

23
00:01:02,528 --> 00:01:04,215
ld命令有三个参数

24
00:01:04,496 --> 00:01:05,791
第一个参数是位置

25
00:01:05,891 --> 00:01:08,003
你可以写l、c或者r

26
00:01:08,103 --> 00:01:10,678
分别代表英文中的left、center和right

27
00:01:10,778 --> 00:01:11,971
即左、中、右

28
00:01:12,116 --> 00:01:13,933
比如如果我把这里的c改成l

29
00:01:14,544 --> 00:01:16,425
这张立绘就会在左侧显示

30
00:01:24,029 --> 00:01:26,691
然后在半角逗号右边是文件路径

31
00:01:26,691 --> 00:01:27,835
不要忘了半角引号

32
00:01:28,077 --> 00:01:30,868
然后再右边是跟bg命令一样的效果编号

33
00:01:30,968 --> 00:01:32,016
第1讲有讲过

34
00:01:32,640 --> 00:01:36,502
那么这个文件路径里头为啥有个冒号a分号呢？

35
00:01:36,502 --> 00:01:38,387
这个在第2讲中我们也有见到过

36
00:01:38,387 --> 00:01:39,882
但是那时我没有详细说

37
00:01:39,882 --> 00:01:41,272
现在我就来解释一下

38
00:01:41,973 --> 00:01:43,907
一张人物立绘通常是长这样的

39
00:01:44,007 --> 00:01:45,797
它与一张背景有什么区别呢？

40
00:01:45,897 --> 00:01:47,532
一张背景 它是方方正正的

41
00:01:47,632 --> 00:01:49,588
要完整地贴合游戏窗口的分辨率

42
00:01:49,488 --> 00:01:51,379
在这里是800x600

43
00:01:52,572 --> 00:01:53,536
而一张立绘

44
00:01:53,636 --> 00:01:55,220
里面的内容通常是一个人

45
00:01:55,320 --> 00:01:56,684
而一个人不太可能是方的

46
00:01:56,684 --> 00:01:58,723
所以立绘图片在除了必要的人形以外

47
00:01:58,723 --> 00:02:00,165
其它的地方都是透明的

48
00:02:00,265 --> 00:02:04,208
透明在许多图像查看器中会被显示为
像国际象棋棋盘一样的格子

49
00:02:04,553 --> 00:02:06,087
而一张图片中的透明部分

50
00:02:06,087 --> 00:02:07,089
是怎么实现的呢？

51
00:02:07,189 --> 00:02:10,748
首先我们要感谢便携式网络图形格式（PNG）的发明者

52
00:02:10,848 --> 00:02:11,473
W3C

53
00:02:11,573 --> 00:02:14,712
是PNG格式给了图片包含透明信息的能力

54
00:02:14,812 --> 00:02:16,238
而在更加古老的年代

55
00:02:16,338 --> 00:02:17,529
ONScripter足够老了

56
00:02:17,629 --> 00:02:19,754
那时PNG格式还使用的很少

57
00:02:19,854 --> 00:02:24,438
而传统的BMP和JPEG格式是不支持
在图片中直接包含透明信息的

58
00:02:24,538 --> 00:02:26,381
那时人们是怎么干的呢？

59
00:02:27,168 --> 00:02:28,309
因为JPEG有压缩

60
00:02:28,309 --> 00:02:30,160
所以我这里只拿BMP来做例子

61
00:02:31,791 --> 00:02:33,402
我们用GIMP打开这张图片

62
00:02:35,403 --> 00:02:37,967
不知道GIMP的可以看一下第一讲的软件安利

63
00:02:38,102 --> 00:02:40,651
首先我们发现这张图片是索引颜色

64
00:02:40,751 --> 00:02:42,088
为了避免不必要的麻烦

65
00:02:42,088 --> 00:02:44,621
我们把这张图片转换为RGB颜色

66
00:02:45,616 --> 00:02:47,900
图像 模式 RGB

67
00:02:47,900 --> 00:02:50,072
接着在右边图层这里右键

68
00:02:50,172 --> 00:02:52,218
点“移除Alpha通道”

69
00:02:52,218 --> 00:02:54,865
你会发现原本国际棋盘一样的格子不见了

70
00:02:54,965 --> 00:02:57,390
这张图片原本透明的地方现在变成了白色

71
00:02:57,490 --> 00:02:58,413
然后文件

72
00:02:58,513 --> 00:02:59,910
千万别点成Overwrite

73
00:03:00,010 --> 00:03:01,990
一定要点Export As

74
00:03:02,090 --> 00:03:04,626
然后文件格式这里选择按扩展名

75
00:03:04,726 --> 00:03:07,205
保存为a.bmp

76
00:03:12,657 --> 00:03:14,423
关掉GIMP 放弃修改

77
00:03:15,002 --> 00:03:18,896
你可以看到这张a.bmp是一张白色背景的图片

78
00:03:18,996 --> 00:03:20,119
然后我们去修改脚本

79
00:03:20,832 --> 00:03:24,159
把这里冒号a分号中的a给改成c

80
00:03:24,259 --> 00:03:27,516
然后把图片路径改成a.bmp的路径

81
00:03:30,181 --> 00:03:31,509
然后再运行游戏

82
00:03:34,599 --> 00:03:35,557
大事不对啦

83
00:03:35,657 --> 00:03:37,413
图片变成了白色背景

84
00:03:37,413 --> 00:03:38,292
这很好理解

85
00:03:38,292 --> 00:03:40,757
因为这张立绘图片中没有包含任何透明信息

86
00:03:40,857 --> 00:03:42,827
ONScripter不知道哪个地方该透明

87
00:03:42,927 --> 00:03:43,838
哪个地方不该

88
00:03:43,938 --> 00:03:48,796
而之前我写的冒号c分号代表让ONScripter
不论如何都要展示图片的全貌

89
00:03:48,896 --> 00:03:51,435
所以即使是白色的部分它也显示了出来

90
00:03:51,729 --> 00:03:52,727
这显然是不行的

91
00:03:52,827 --> 00:03:55,554
所以它提供了一种方式来让自己知道哪个地方该透明

92
00:03:56,462 --> 00:03:58,393
现在把这里的c改成l

93
00:03:59,569 --> 00:04:00,531
然后再运行游戏

94
00:04:06,151 --> 00:04:07,092
背景透明了！

95
00:04:07,192 --> 00:04:09,650
在冒号与分号之间指定了l的时候

96
00:04:09,750 --> 00:04:13,002
ONScripter会获取这张图片
最左上角一个像素（的颜色）

97
00:04:13,102 --> 00:04:16,440
并且把这张图片中
所有以这个颜色相同的地方全都变成透明

98
00:04:16,607 --> 00:04:19,216
那么在这里就是纯白的部分全都变成透明了

99
00:04:20,036 --> 00:04:21,834
但是仔细看就会发现问题

100
00:04:21,934 --> 00:04:23,385
如果在这张图片中有白色

101
00:04:23,485 --> 00:04:25,357
但我不想让某些白色的部分变成透明

102
00:04:25,457 --> 00:04:26,010
就办不到了

103
00:04:26,110 --> 00:04:27,394
比如这里眼睛高亮的部分

104
00:04:27,494 --> 00:04:29,017
现在变成了透明的

105
00:04:29,117 --> 00:04:29,880
再往深处想

106
00:04:29,980 --> 00:04:31,140
如果我想要半透明的地方

107
00:04:31,240 --> 00:04:31,835
也做不到

108
00:04:32,456 --> 00:04:34,629
高桥直树当然预料到了这种情况

109
00:04:34,729 --> 00:04:38,998
设计了一种略微蛋疼的方式
让ONScripter明确的知道哪些地方该透明

110
00:04:39,098 --> 00:04:40,012
透明百分之多少

111
00:04:40,112 --> 00:04:41,139
哪些地方不该透明

112
00:04:41,433 --> 00:04:44,092
于是我们再用GIMP打开PNG格式的原图

113
00:04:48,992 --> 00:04:50,254
转成RGB颜色

114
00:04:52,202 --> 00:04:55,403
然后在右边图层这里选择Alpha到选区

115
00:04:56,739 --> 00:04:58,593
这样 GIMP就会选中不透明的部分

116
00:04:58,693 --> 00:05:00,388
然后再把它填充为黑色

117
00:05:01,614 --> 00:05:03,377
再新建一个图层

118
00:05:07,321 --> 00:05:08,569
先取消选中

119
00:05:10,240 --> 00:05:11,866
再把这个图层拖到下面

120
00:05:12,505 --> 00:05:13,776
然后用白色（填充）

121
00:05:15,446 --> 00:05:18,077
然后导出为b.bmp

122
00:05:23,634 --> 00:05:26,678
注意要点开高级选项选择24位颜色

123
00:05:29,347 --> 00:05:34,088
然后你就可以得到这样的两张a.bmp和b.bmp

124
00:05:36,911 --> 00:05:39,144
再用GIMP打开a.bmp

125
00:05:44,384 --> 00:05:46,858
图像 画布大小

126
00:05:46,958 --> 00:05:48,861
把宽度扩大到原来的两倍

127
00:05:48,961 --> 00:05:53,006
391乘2等于782

128
00:05:56,411 --> 00:06:00,009
然后文件 作为图层打开

129
00:06:00,109 --> 00:06:00,982
b.bmp

130
00:06:01,925 --> 00:06:05,254
然后再用对其工具把它右对齐

131
00:06:05,688 --> 00:06:08,862
最后导出为c.bmp

132
00:06:18,436 --> 00:06:20,909
最后你就会得到这样一张诡异的图片

133
00:06:21,009 --> 00:06:26,819
现在回到脚本文件 把图片路径改成c.bmp

134
00:06:27,768 --> 00:06:31,373
再把冒号与分号之间改成a

135
00:06:31,976 --> 00:06:33,186
再运行游戏

136
00:06:38,307 --> 00:06:39,069
完美！

137
00:06:40,059 --> 00:06:41,121
这是怎么做到的呢？

138
00:06:41,221 --> 00:06:42,914
ONScripter在你指定a的时候

139
00:06:43,014 --> 00:06:45,090
会将这张图片的内容分为左右两半

140
00:06:45,190 --> 00:06:46,697
左边作为实际的内容

141
00:06:46,797 --> 00:06:49,170
右边以灰度决定图片中每个像素的透明度

142
00:06:49,270 --> 00:06:50,728
白色就是完全透明

143
00:06:50,828 --> 00:06:52,189
黑色就是完全不透明

144
00:06:52,289 --> 00:06:54,634
深度不同的灰色就是半透明

145
00:06:54,734 --> 00:06:56,203
颜色越深不透明度越高

146
00:06:56,303 --> 00:06:57,475
而这右半部分

147
00:06:57,575 --> 00:06:58,817
专业的说法叫做Alpha

148
00:06:58,929 --> 00:07:00,697
当然现在我们不用这么麻烦了

149
00:07:00,797 --> 00:07:03,374
只要在绘画这张立绘的时候拿透明做背景

150
00:07:03,474 --> 00:07:04,847
导出为PNG就可以了

151
00:07:05,273 --> 00:07:08,480
因为PNG可以让图片本身就包含Alpha层

152
00:07:08,580 --> 00:07:09,599
就是透明信息

153
00:07:10,022 --> 00:07:12,262
我们讲这些知识只是为了帮助理解

154
00:07:12,362 --> 00:07:13,373
但是因为传统

155
00:07:13,473 --> 00:07:16,052
我们还是得标注上冒号a分号

156
00:07:16,152 --> 00:07:18,371
否则ONScripter会忽略这个Alpha层

157
00:07:18,471 --> 00:07:21,516
不过这时它就不是把图片切成左右两部分

158
00:07:21,616 --> 00:07:24,330
而是直接就使用PNG里面的Alpha层

159
00:07:24,596 --> 00:07:25,448
总结一下

160
00:07:25,548 --> 00:07:29,104
在ld命令（以及之前的setwindow，以后还会学到更多）中

161
00:07:29,204 --> 00:07:30,120
引号之内

162
00:07:30,220 --> 00:07:31,423
图片路径名之前

163
00:07:31,523 --> 00:07:33,598
加上冒号、一个字母、分号

164
00:07:33,698 --> 00:07:37,166
表示你告诉ONScripter这张图片该如何处理透明的部分

165
00:07:37,266 --> 00:07:40,393
这个字母是l代表英文的leftup

166
00:07:40,493 --> 00:07:42,737
就是左上角的颜色作为变成透明的颜色

167
00:07:42,837 --> 00:07:44,775
c代表英文的copy

168
00:07:44,875 --> 00:07:47,661
就是表示无论如何忽略透明信息

169
00:07:48,172 --> 00:07:49,674
a代表英文的alpha

170
00:07:49,774 --> 00:07:54,474
就是使用图片右半部分的Alpha信息
或着PNG图片中的Alpha层

171
00:07:54,921 --> 00:07:55,615
如果我不写

172
00:07:55,715 --> 00:07:56,782
它就会按照默认的来

173
00:07:56,882 --> 00:07:58,520
默认的方式是l

174
00:07:58,620 --> 00:08:00,465
就是左上角作为透明色

175
00:08:00,565 --> 00:08:03,086
但如果你的大部分都是以a方式透明

176
00:08:03,086 --> 00:08:05,900
而不想给每个地方都加个冒号a分号

177
00:08:06,000 --> 00:08:07,339
就可以在define区

178
00:08:07,439 --> 00:08:08,530
对 就是define区

179
00:08:08,630 --> 00:08:11,106
在*define和game之间加上一行

180
00:08:15,849 --> 00:08:18,107
transmode alpha

181
00:08:18,927 --> 00:08:21,675
这样默认就会变成以a方式表示透明

182
00:08:21,775 --> 00:08:26,068
哪怕我在这里去掉这个冒号a分号

183
00:08:26,068 --> 00:08:27,131
也是没有问题的

184
00:08:27,231 --> 00:08:30,288
这就是我们学习的第一个用在define区里面的命令

185
00:08:30,388 --> 00:08:31,726
下一讲会学习更多

186
00:08:32,144 --> 00:08:33,103
对了 差点忘了说

187
00:08:33,203 --> 00:08:35,160
cl命令用来消除屏幕上的立绘

188
00:08:35,260 --> 00:08:38,048
参数是表示位置的l、c或者r

189
00:08:38,148 --> 00:08:39,863
以及跟ld一样的效果参数

190
00:08:39,963 --> 00:08:42,795
比如我在这里加上

191
00:08:48,690 --> 00:08:50,591
在“她是一个绝赞的人”之后

192
00:08:50,691 --> 00:08:54,344
立绘就会以渐变500毫秒的方式消失

193
00:09:02,939 --> 00:09:04,464
那么这一讲到这里就结束了

194
00:09:04,464 --> 00:09:05,231
感谢大家的支持

195
00:09:05,331 --> 00:09:07,703
喜欢我的视频就给个硬币并推荐给朋友吧

196
00:09:07,803 --> 00:09:09,298
如果觉得我的视频做的不够好

197
00:09:09,398 --> 00:09:11,178
也可以向我提出你的意见和建议

198
00:09:11,278 --> 00:09:14,497
资源都已经上传到视频介绍中更多信息上面的链接里了

199
00:09:14,597 --> 00:09:15,874
那么我们下期再见！

