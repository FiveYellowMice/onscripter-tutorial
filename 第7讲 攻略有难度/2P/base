那么这里就是大家期待已久的2P了，有了1P的铺垫，我就不说一堆废话了，直入主题——为我们的游戏真正的加上较复杂分支。
为了防止剧透这个示例游戏的剧情（虽然很没营养），我先给大家看一下成品好了……选以后再问的话就会到Bad End，这是上一讲的内容我就不重复展示了，然后我们选立即去问……现在又出现一次选项，按照惯例我们要先存一下档……然后我们选第一个……接下来我再回到刚刚存档的地方，选第二个选项……
那这个游戏就是这样，毕竟只是一个示例大家也不要指望有什么剧情。另外这个故事也不是我写的，所以各位也请别打我。
我们来画一下这个游戏的完整的分支图吧。先是立即去问和以后再问的树形分支，选择以后再问的话就会到达Bad Ending。在立即去问之后又会有“有很多图片的故事”和“HENTAI的游戏”两个选项，这样分成了两个分支，不过在分出去一段时间之后就合并回来了，所以这是一个并联分支。
第二个并联分支可能不是很明显，就相差了一句话“除了她想要做的那些搞比利的游戏”，没注意到的朋友可以把进度条拖回去看看，我就不重复展示了。这句话只有在玩家在上面选择了“HENTAI的游戏”的时候，才会出现，如果选择了“有很多图片的故事”则没有。
最后，不管你是选那个，都会进入Good Ending，也就是说只有第一次选项分支会决定结局，第二次则不会影响到结局。
那么这张流程图画好了，我们就开工吧！首先先从素材里拿出图片和音乐，还有0.txt，这些个脚本就是我们在上一讲的成果，然后把主程序和字体也放到这里来，轻车熟路了。打开0.txt，找到未完待续的地方，把这两行删掉。
跟上一讲一样，用select命令来做出选项分支，select，是有很多图片的故事，标签我这里就叫vn，是HENTAI的游戏，我就把这个标签叫做hentai。然后我们开始写“是有很多图片的故事”这个分支的内容，也就是*vn这个标签之后的内容……
这样我们的Good Ending就写完了，但是别忘了我们还有一个hentai的分支。许多人可能会认为直接在这后面写就可以了，不过这是一个并联分支，如果直接在后面写就免不了会有大量的重复。虽然可以复制粘帖，但是这样会使脚本的结构变得混乱且难以管理，比如如果我要修改一部分重复的剧情中的文字，就得把每个地方都修改一遍，也很容易不小心漏掉某个地方。
那么怎么才能避免重复写同一段文字呢？从流程图里我们就可以看的很明白，在某个地方，这两个分支要合并到一起，也就是要共用同一段文本。那么我们在脚本里面找一下这两条分支合并的地方……也就是“几年后”之前，我们在它前面加上一个标签，就叫marry。那么我们就可以让它在hentai分支的内容结束之后，跳转到marry标签，然后我们就可以在Good Ending这句话之后写hentai标签及其之后的内容了。不过我是个强迫症患者，一定要把两段并联分支放在一起，也就是把hentai分支要放在“有很多图片的故事”分支以及marry标签的中间，但是这样的话在“你不会让我失望的，你知道的”之后就会跑到hentai分支去了。为了避免这种荒唐的事情，我们要在“你不会让我失望的，你知道的”这句话之后加上一条命令，让ONScripter直接跳转到marry标签，这条命令就是goto，跟英语里面的go to一个意思，但中间没有空格，我们就写上goto *marry。这样，不论在这条goto命令和marry标签之间发生什么，都不会影响到“有很多图片的故事”分支里面的内容。
接下来我们写hentai分支的内容……在“我不是这个意思啊”之后还会继续往下执行，执行marry标签之后的内容。但是我是一个不可救药强迫症患者，一定要在所有并联分支之后都写上goto命令来合并到主分支，所以我还是写上这条没什么用处的goto *marry。
这样，我们的第一个并联分支就完成了，再看一下之前画的流程图，我们还需要做第二个并联分支。这个并联分支呢，是在“我们做了许多游戏并感到十分快乐”之后多出了一句话。我们要让ONScripter判断你是否经历过hentai分支，以此来决定是否进入这个分支，这具体需要怎么做呢？
ONScripter没有直接的功能让它判定玩家是否经历过某个分支，但是我们可以通过自己设定变量来实现这个功能。所谓变量就是电脑在内存中所存储的一个值，这个值可以是数字、字符串（文本）或者是什么别的东西，我们可以给变量赋值，也可以引用之前存储在变量里面的值，好感度就是变量的一种用途。变量通常都有一个名称，在ONScripter里面，变量有数字变量和字符串变量两种，这里我们只会用到数字变量。变量的名称只能是数字，可以是0至4095之间的任何一个数字（包括两端），0号变量我们通常会被留作别的用途，所以在这里我们就拿1号变量来存储玩家是否经过hentai分支的记录。变量的值为0就表示没有经过hentai分支，1就表示经过了。
变量不需要事先定义，这点跟许多编程语言不一样，但是要事先给变量赋值，那么因为0表示没有经过hentai分支，所以我们就在游戏开始的地方给这个变量赋值为0。给变量赋值的命令叫做mov，就是英语move的前三个字母，不是movie的意思啊。这条命令有两个参数，第一个是变量的名称，我在这里写上%1，百分号就表示是一个数字变量，1表示是一号变量，第二个参数是要给变量赋的值，之前说过了，是0。
那么这样一来在游戏开始的时候ONScripter就会在电脑的内存里保存一个叫做“1号变量”的数字，值为0。接下来我们到hentai分支开始的地方，也写上一条mov命令，把这个变量的值变成1，mov %1,1。这样在玩家进入了hentai分支的时候，1号变量的值就变成了1，而这一切，玩家都是浑然不知的。
那么我们现在就可以在分支发生的地方，也就是“我们做了许多游戏并感到十分快乐”这句话的后面，加上一条命令，让它判断1号变量的值，并在其值为1的时候让它显示“除了她想要做的那些搞比利的游戏”这句话。
那么我们就要使用if命令，先写上if，空格，再写上判断的条件，在这里就是1号变量等于1，虽然写一个等号也可以，但这不是个好习惯。然后再空格，注意是空格而不是半角逗号，然后再写上一条命令，如果之前的判段结果为真，就是说如果之前的式子是成立的，就会执行后面的命令，否则什么事也不会发生。if的判断条件除了等于（==）以外，还可以是大于（>），小于（<），大于等于（>=），小于等于（<=），不等于（!=）。而且还有一个notif命令，跟if的用法一样，但是顾名思义，notif命令只有在判断结果为假，也就是式子不成立的情况下，才会执行后面的命令。不过我们在这里还用不到这些。
那么在1号变量为1的时候，要发生什么呢？当然就是进入第二次并联分支，但是这次跟上次不一样了，只是比另一条分支多一句话，所以我也不用再为两个分支加标签，这里使用gosub命令，gosub命令的参数跟goto一样，是要跳转到的标签的名字，我就把它叫做bl好了。gosub跟goto的区别在于，goto在执行之后就是直接跳到目标标签的位置去了，而gosub在跳过去之后，会记住你在跳之前的位置，在碰到了return命令时，就会回到原本gosub的地方然后继续执行gosub之后的语句。
那么我们现在在后面比较清净的位置加上bl标签，然后写上分支里的内容，在这里只有一句话……你要是想写上好几句话或者是好几条命令也可以。不过记得在最后写上return。这样就如我刚刚说的，会回到原来gosub的地方，记住，gosub命令不能乱用，用完了之后一定要return，否则就用goto。
好了，完成了之后呢，在1号变量等于1的时候，就会gosub到bl标签，执行这一句话，然后再跳回去，就一路通向Good Ending。
现在我们看一下流程图，在游戏开始的时候1号变量的值是0，到后面如果玩家选择了“HENTAI的游戏”这个选项，就会变成1，进而在第二次并联分支的时候显示这句话。如果选择的是“有很多图片的故事”，那1号变量的值就不变，还是0，到后面就会走这边，不会显示这句话。
那么现在有些人可能就会问了，变量的名称只能是数字吗？如果我变量多了，只用数字的话肯定会很难记住而降低效率。那该怎么办呢？我们可以在define区，给变量取一个名字，我们要用到numalias这条命令，num就是number的意思，alias就是别名，它有两个参数，第一个参数是变量的新名字，这个名字只能是半角字母或数字，中间不能有空格，我就给它取名叫bl_game好了，半角逗号，第二个参数是变量的编号，在这里就是1，注意在取名的时候不要写上百分号。
取名取好了之后呢，我们就可以把下面的%1全都改成%bl_game了……这样一来，我们就可以以bl_game的名字来记住这个变量，而不是生硬的数字了。如果你有2, 3, 4或者更多的变量也是同理。
好了，这样我们这一讲的内容就完成了，想看一看每一讲的进步的话，我们可以使用diff工具来对比一下素材里原本的0.txt和这一讲完成之后的0.txt，有时间我去介绍一下。
那么所有的素材都已经上传到视频介绍中的链接里了，在完成之后你也可以按照自己的想法来设计自己的游戏的分支流程。
最后向往常一样感谢大家的支持。喜欢我的视频就给个硬币并推荐给朋友吧，觉得我的视频做的不够好也可以发邮件提出你的意见或建议。下一讲是精灵，那么我们下期再见！
