1
00:00:00,000 --> 00:00:00,536
大家好

2
00:00:00,636 --> 00:00:02,460
这里是FiveYellowMice给大家带来的

3
00:00:02,460 --> 00:00:04,627
小白也能学会的Galgame制作的第7讲

4
00:00:04,933 --> 00:00:07,225
如果你是第一次看到这个系列的视频

5
00:00:07,325 --> 00:00:08,911
建议你先从第0讲开始看

6
00:00:09,011 --> 00:00:10,988
点一下UP主头像或者ID就可以找到了

7
00:00:11,409 --> 00:00:12,769
不过即使你不看前面几讲

8
00:00:12,869 --> 00:00:14,734
这一讲的内容也或许会对你有所帮助

9
00:00:15,406 --> 00:00:18,015
那么这一讲我们来学习一下较为复杂的选项分支

10
00:00:18,821 --> 00:00:20,407
在人们开始写一篇小说的时候

11
00:00:20,507 --> 00:00:21,923
一般都要制定一个故事大纲

12
00:00:22,023 --> 00:00:23,678
里面有一些故事的主要走向

13
00:00:23,678 --> 00:00:24,878
开始以及结局

14
00:00:24,978 --> 00:00:26,525
还有人物、场景的设定

15
00:00:26,980 --> 00:00:28,295
尤其是写长篇小说的时候

16
00:00:28,395 --> 00:00:30,004
写一个Galgame脚本也一样

17
00:00:30,104 --> 00:00:31,201
如果没有剧情大纲

18
00:00:31,201 --> 00:00:32,101
写到哪想到哪

19
00:00:32,201 --> 00:00:33,706
是很难做出优秀的故事的

20
00:00:34,136 --> 00:00:35,843
而且一个Galgame的大纲通常要

21
00:00:35,843 --> 00:00:37,602
比一篇小说的大纲还要复杂的多

22
00:00:37,702 --> 00:00:39,494
因为一篇小说肯定只有一条线路

23
00:00:39,594 --> 00:00:42,042
读者不可能有决定故事中人物命运的机会

24
00:00:42,499 --> 00:00:44,257
如果作者想要给故事一个好结局

25
00:00:44,357 --> 00:00:45,979
读者就只能看到好结局

26
00:00:46,079 --> 00:00:47,446
如果作者写的是坏结局

27
00:00:47,546 --> 00:00:49,007
读者也只能看到坏结局

28
00:00:49,107 --> 00:00:52,101
而Galgame通常主要的游戏性在于各种选项分支

29
00:00:52,664 --> 00:00:54,668
这些选项有些可以直接改变故事的结局

30
00:00:54,768 --> 00:00:57,922
有些会影响到某些数值而间接影响到游戏的结局

31
00:00:58,022 --> 00:00:59,476
比如可攻略角色的好感度

32
00:00:59,576 --> 00:01:02,384
或者你也可以放一些无关紧要的选项来为难玩家

33
00:01:02,735 --> 00:01:05,130
所以如果你决定做一个选项分支比较复杂的游戏

34
00:01:05,230 --> 00:01:07,698
除了要写人物设定和多条剧情走向以外

35
00:01:07,798 --> 00:01:10,375
画一个流程图来表示各种分支也是很有必要的

36
00:01:11,639 --> 00:01:13,299
比如 最简单的一种分支类型

37
00:01:13,399 --> 00:01:14,631
一次选项 两条结局

38
00:01:15,017 --> 00:01:16,673
如果玩家选择A 那么就会到达结局A

39
00:01:16,773 --> 00:01:18,284
如果玩家选择B 则会到达结局B

40
00:01:18,834 --> 00:01:21,056
我们上一讲所讲的中的示例就是这样的分支结构

41
00:01:21,652 --> 00:01:23,196
我们还可以做的更加复杂一些

42
00:01:23,296 --> 00:01:25,690
比如再加上一个第三个选项以及结局C

43
00:01:25,790 --> 00:01:28,010
或者是在其中的一条分支上再加上一条分支

44
00:01:28,310 --> 00:01:32,068
当然我们也可以分支再分支……

45
00:01:32,168 --> 00:01:33,443
你也可以加上更多分支

46
00:01:33,443 --> 00:01:34,408
把它变得更复杂

47
00:01:34,824 --> 00:01:35,944
这样的一个分支结构

48
00:01:36,044 --> 00:01:37,073
可以叫做树形分支

49
00:01:37,173 --> 00:01:37,769
不过呢

50
00:01:37,869 --> 00:01:39,598
我想我的观众是不会满足于这种分支的

51
00:01:39,698 --> 00:01:41,132
因为它太简单粗暴了

52
00:01:41,232 --> 00:01:42,270
依靠上一讲的知识

53
00:01:42,370 --> 00:01:44,204
只要再多花一点时间就可以做出来

54
00:01:44,663 --> 00:01:46,224
所以我们也可以放上这样的一种分支

55
00:01:47,042 --> 00:01:47,961
它在分出去之后

56
00:01:48,061 --> 00:01:49,625
又会合并到原来的主线上

57
00:01:49,725 --> 00:01:52,276
而在支线之中可能可以是一些无关紧要的剧情

58
00:01:52,276 --> 00:01:53,184
比如福利之类的

59
00:01:53,572 --> 00:01:56,579
支线里面也可以是一些另以后剧情改变的内容

60
00:01:56,679 --> 00:01:57,819
比如说我可以这样

61
00:01:57,919 --> 00:01:59,965
先让玩家选择一次选项来决定

62
00:01:59,965 --> 00:02:01,869
是进入事件A还是呆在主线上

63
00:02:02,421 --> 00:02:04,792
而后面一次分支就不是让玩家选择一次选项了

64
00:02:05,188 --> 00:02:06,357
而是让电脑进行一次判定

65
00:02:06,457 --> 00:02:08,055
如果玩家经历过事件A

66
00:02:08,055 --> 00:02:08,975
则会进入结局A

67
00:02:08,975 --> 00:02:09,952
否则进入结局B

68
00:02:10,052 --> 00:02:11,936
像这种分出去又回来的分支

69
00:02:12,036 --> 00:02:13,055
可以叫做并联分支

70
00:02:13,492 --> 00:02:15,759
大部分的日常向Galgame一般是使用一条主线

71
00:02:15,859 --> 00:02:17,701
经历多次并联分支以后

72
00:02:17,701 --> 00:02:20,562
再在最后通过判定把玩家引向不同的结局

73
00:02:20,662 --> 00:02:21,589
同样举个例子

74
00:02:21,689 --> 00:02:24,092
假如我们要做的这个游戏中有三个可攻略角色

75
00:02:24,192 --> 00:02:25,862
一个角色对应一个结局

76
00:02:26,251 --> 00:02:29,085
那么我们就可以为每个角色设计两个并联分支

77
00:02:29,185 --> 00:02:31,076
让玩家通过选项决定是否进入

78
00:02:31,176 --> 00:02:33,330
这些分支会让某个角色的好感度+1

79
00:02:33,430 --> 00:02:34,375
而在最后

80
00:02:34,475 --> 00:02:36,135
电脑会分析各个角色的好感度

81
00:02:36,235 --> 00:02:37,851
在角色A达到好感度2的时候

82
00:02:37,951 --> 00:02:39,048
进入角色A的结局

83
00:02:39,148 --> 00:02:41,363
在角色B达到好感度2的时候进入B的结局

84
00:02:41,463 --> 00:02:43,577
C的好感度到2的时候进入C的结局

85
00:02:44,300 --> 00:02:46,141
不过这样的设计也可能会产生问题

86
00:02:46,241 --> 00:02:48,282
因为玩家可能没有另3个可攻略角色

87
00:02:48,282 --> 00:02:49,720
中的任意一个的好感度达到2

88
00:02:50,199 --> 00:02:52,938
解决这个问题的方法可以是再添加一个和平结局

89
00:02:53,038 --> 00:02:55,930
就是任何一个角色的好感度都没达到2时所进入的结局

90
00:02:56,367 --> 00:02:59,493
同时 玩家也有可能使不止一个的角色的好感度达到2

91
00:02:59,593 --> 00:03:01,919
解决这个问题的方法可以是设定一个优先顺序

92
00:03:02,019 --> 00:03:04,723
比如如果角色A和B的好感度都达到了2

93
00:03:04,823 --> 00:03:06,547
那么就优先选择进入A的结局

94
00:03:06,647 --> 00:03:08,359
比较直观的示意图像这样

95
00:03:08,835 --> 00:03:09,513
在这种情况下

96
00:03:09,613 --> 00:03:11,347
如果角色A的好感度已经达到了2

97
00:03:11,447 --> 00:03:12,951
那么不论B、C如何

98
00:03:13,051 --> 00:03:14,229
都会达到A的结局

99
00:03:15,312 --> 00:03:17,066
有时候 我们会采取这样的并联分支

100
00:03:17,166 --> 00:03:18,338
无论选哪个选项

101
00:03:18,438 --> 00:03:19,848
都会有角色的好感度增加

102
00:03:19,948 --> 00:03:23,110
这种方法也被用来避免没有角色好感读达标的尴尬状况

103
00:03:23,773 --> 00:03:24,394
事实上

104
00:03:24,494 --> 00:03:26,505
一个Galgame的分支流程图可以很复杂

105
00:03:26,944 --> 00:03:28,496
可以有各种各样复杂的分支

106
00:03:28,596 --> 00:03:29,658
树形之上再树形

107
00:03:29,758 --> 00:03:30,996
并联之后再并联

108
00:03:31,096 --> 00:03:32,411
不过仔细分解下来

109
00:03:32,511 --> 00:03:33,972
再复杂的流程图也不过是

110
00:03:33,972 --> 00:03:36,023
一些树形分支和并联分支的组合

111
00:03:36,509 --> 00:03:38,004
而我们在制作自己的游戏的时候

112
00:03:38,104 --> 00:03:39,105
就需要思考很多问题

113
00:03:39,205 --> 00:03:41,233
我们需要仔细的规划流程图的安排

114
00:03:41,333 --> 00:03:45,411
以及要思考你所设计的流程图是否适合你的剧情需要

115
00:03:46,113 --> 00:03:47,755
好吧也许听了这么多你已经头晕了

116
00:03:47,855 --> 00:03:49,588
那我就不再继续深入讲什么

117
00:03:49,588 --> 00:03:51,649
循环、附加剧情还有彩蛋之类的了

118
00:03:52,093 --> 00:03:53,054
不过俗话说得好

119
00:03:53,364 --> 00:03:54,253
实践出真知

120
00:03:54,650 --> 00:03:55,529
所以在2P中

121
00:03:55,908 --> 00:03:59,590
我们将补全上一讲的示例里面“未完待续”的内容

122
00:03:59,690 --> 00:04:01,438
我们会采用这样的一条流程图

123
00:04:01,999 --> 00:04:04,216
简单地实践一下刚才学到的理论知识

