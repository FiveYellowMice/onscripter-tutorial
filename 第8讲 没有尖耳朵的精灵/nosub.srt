1
00:00:00,151 --> 00:00:00,624
大家好

2
00:00:00,724 --> 00:00:04,870
这里是FiveYellowMice给大家带来的小白也能学会的Galgame制作的第8讲

3
00:00:05,296 --> 00:00:06,965
如果你是第一次看到这个系列的视频

4
00:00:07,065 --> 00:00:08,519
建议你先从第0讲开始看

5
00:00:08,974 --> 00:00:10,751
点一下UP主的头像或者ID就可以找到了

6
00:00:11,140 --> 00:00:13,542
那么我们这一讲就将开始迈入精灵的殿堂

7
00:00:13,852 --> 00:00:16,014
以后我们几乎所有的工作都与这个精灵有关

8
00:00:16,332 --> 00:00:17,557
一个游戏如果没有精灵

9
00:00:17,657 --> 00:00:18,879
就像我们之前所做的那些一样

10
00:00:18,979 --> 00:00:19,936
是单调乏味的

11
00:00:20,063 --> 00:00:21,369
但这个精灵究竟是什么呢？

12
00:00:21,682 --> 00:00:23,489
大多数人看到“精灵”都会想到这个

13
00:00:24,359 --> 00:00:26,288
不过我在这里说的显然不是它了

14
00:00:27,649 --> 00:00:30,305
而是这个

15
00:00:31,373 --> 00:00:33,653
简单来说就是在屏幕上可以移动的图片

16
00:00:33,955 --> 00:00:34,632
举个例子

17
00:00:34,732 --> 00:00:36,058
在“吃豆人”游戏中

18
00:00:36,158 --> 00:00:37,475
这个迷宫是背景

19
00:00:37,575 --> 00:00:40,491
而吃豆人本体、敌人以及被吃的豆子都是精灵

20
00:00:40,753 --> 00:00:43,509
如果还不理解请像我一样查看维基百科

21
00:00:44,728 --> 00:00:45,612
那么有了精灵

22
00:00:45,712 --> 00:00:48,703
我们就可以作出好看的标题画面、菜单、文字框

23
00:00:48,803 --> 00:00:49,766
还有其他什么别的东西

24
00:00:50,159 --> 00:00:51,795
精灵是一个十分有力的工具

25
00:00:52,178 --> 00:00:53,666
但是为了得到精灵的力量

26
00:00:53,766 --> 00:00:55,060
我们必须付出更多的努力

27
00:00:55,160 --> 00:00:56,478
来掌握它的使用方法

28
00:00:57,878 --> 00:00:59,133
首先我们创建一个目录

29
00:00:59,233 --> 00:01:01,055
把主程序、字体都放进去

30
00:01:01,155 --> 00:01:02,941
再新建一个0.txt

31
00:01:06,271 --> 00:01:07,601
把编码改成GBK

32
00:01:09,075 --> 00:01:17,961
然后再 *define game *start

33
00:01:18,272 --> 00:01:19,190
先设定一个背景

34
00:01:19,290 --> 00:01:20,964
我懒得找图片了就写white好了

35
00:01:22,583 --> 00:01:26,244
然后再10号渐变效果 持续500毫秒

36
00:01:26,344 --> 00:01:26,785
回车

37
00:01:27,512 --> 00:01:30,261
这时我想让它在不显示文字的情况下暂停

38
00:01:30,361 --> 00:01:31,889
需要一下鼠标才能继续

39
00:01:32,316 --> 00:01:33,525
这就要用到click命令

40
00:01:35,481 --> 00:01:36,463
最后end

41
00:01:37,892 --> 00:01:40,528
保存 运行

42
00:01:41,154 --> 00:01:42,472
这样它在显示完背景之后

43
00:01:42,572 --> 00:01:43,703
就会执行到click命令

44
00:01:43,803 --> 00:01:44,921
点一下鼠标

45
00:01:45,021 --> 00:01:46,504
就往下执行到了end命令

46
00:01:46,604 --> 00:01:47,384
于是就结束了

47
00:01:47,697 --> 00:01:49,034
在让精灵出现之前

48
00:01:49,134 --> 00:01:50,250
我们得准备好一张图片

49
00:01:50,531 --> 00:01:53,130
我已经事先在素材中帮大家找好了两张图片

50
00:01:53,230 --> 00:01:54,531
现在把它们复制过来

51
00:01:58,508 --> 00:02:00,241
这张图片通常就是PNG格式

52
00:02:00,341 --> 00:02:01,260
跟立绘一样

53
00:02:01,360 --> 00:02:04,797
里面包含一个Alpha层来让图片中的某些部分变透明

54
00:02:05,149 --> 00:02:05,810
我们可以看到

55
00:02:05,910 --> 00:02:08,126
这些像国际棋盘格子的地方就是透明的部分

56
00:02:08,775 --> 00:02:10,667
我们现在就可以目睹一下精灵的真面目了！

57
00:02:11,090 --> 00:02:11,862
在click之后

58
00:02:11,962 --> 00:02:13,810
我们来使用lsp命令

59
00:02:13,947 --> 00:02:16,319
这条命令就是让我们在屏幕上加载一个精灵

60
00:02:16,640 --> 00:02:17,288
它有4个参数

61
00:02:17,786 --> 00:02:19,176
第一个参数是精灵的编号

62
00:02:19,276 --> 00:02:21,276
对 编号 这是一个新的概念

63
00:02:21,657 --> 00:02:22,646
精灵跟立绘不一样

64
00:02:22,746 --> 00:02:27,431
立绘只要用简单的l(左) c(中) r(右)就可以让ONScripter知道你要操作的是哪个立绘

65
00:02:27,812 --> 00:02:29,036
而精灵的位置不固定

66
00:02:29,136 --> 00:02:31,356
甚至可以有两个精灵在同一个位置上

67
00:02:31,456 --> 00:02:34,144
所以我们需要用一个数字来代表一个特定的精灵

68
00:02:34,244 --> 00:02:35,506
方便以后对精灵的操作

69
00:02:35,606 --> 00:02:36,565
编号不能够重复

70
00:02:36,665 --> 00:02:39,097
如果有两次lsp使用了同样的编号

71
00:02:39,197 --> 00:02:43,097
那么后来执行的lsp就会把之前的lsp的成果毁掉

72
00:02:43,197 --> 00:02:44,262
这里我们就写1

73
00:02:44,362 --> 00:02:46,145
第2个参数是精灵的图片文件路径

74
00:02:46,555 --> 00:02:51,569
这里我们就用google-chrome.png

75
00:02:52,218 --> 00:02:53,513
刚刚给大家看过这张图片

76
00:02:53,613 --> 00:02:55,252
记住要用半角双引号包起来

77
00:02:55,352 --> 00:02:57,277
第3个参数是精灵的横坐标

78
00:02:57,377 --> 00:02:58,878
在讲文字框的时候有提到

79
00:02:58,978 --> 00:03:01,918
是精灵的左上角与游戏窗口左端的距离

80
00:03:02,018 --> 00:03:03,076
以像素为单位

81
00:03:03,176 --> 00:03:05,029
第4个参数是纵坐标

82
00:03:05,129 --> 00:03:05,682
也同理

83
00:03:05,782 --> 00:03:08,678
是精灵的左上角与游戏窗口顶端的距离

84
00:03:08,778 --> 00:03:11,042
我在这里写200,200

85
00:03:11,853 --> 00:03:13,173
lsp命令写完了之后

86
00:03:13,273 --> 00:03:14,575
是否有感觉漏掉了什么？

87
00:03:14,769 --> 00:03:15,832
对 跟立绘一样

88
00:03:16,214 --> 00:03:18,710
要让ONScripter使用PNG图片的Alpha层

89
00:03:18,810 --> 00:03:20,076
得在文件路径前

90
00:03:20,176 --> 00:03:21,054
引号之内

91
00:03:21,154 --> 00:03:22,862
加上:a;

92
00:03:24,125 --> 00:03:26,012
否则这张图片的Alpha层就会被忽略

93
00:03:26,086 --> 00:03:27,328
这样 在click之后

94
00:03:27,428 --> 00:03:28,781
精灵就会被放到屏幕上

95
00:03:29,245 --> 00:03:30,759
我们在后面再加上一个click

96
00:03:32,397 --> 00:03:33,714
否则在精灵刚出来的时候

97
00:03:33,814 --> 00:03:35,115
ONScripter就退出了

98
00:03:35,605 --> 00:03:36,718
那现在再运行

99
00:03:39,030 --> 00:03:39,850
点鼠标

100
00:03:39,950 --> 00:03:41,050
精灵没有出现

101
00:03:41,150 --> 00:03:42,942
再点 游戏就结束了

102
00:03:43,503 --> 00:03:44,190
这是为什么？

103
00:03:44,290 --> 00:03:45,461
我的代码写错了吗？

104
00:03:45,974 --> 00:03:47,683
事实上 我的代码并没有写错

105
00:03:47,783 --> 00:03:50,434
精灵确实在lsp的时候被加载到了屏幕上

106
00:03:50,534 --> 00:03:52,536
但是它仅仅是被“加载”到了屏幕上

107
00:03:52,636 --> 00:03:54,060
并没有被显示到屏幕上

108
00:03:54,440 --> 00:03:56,881
我们需要刷新一下屏幕才能让它显示出来

109
00:03:56,981 --> 00:03:59,431
这也就是lsp命令没有效果参数的原因

110
00:03:59,531 --> 00:04:01,860
我们在这后面加上一个print命令

111
00:04:04,492 --> 00:04:06,460
print命令的参数就是效果编号

112
00:04:06,794 --> 00:04:08,876
我还是用我最喜欢的渐变500毫秒（10,500）

113
00:04:10,259 --> 00:04:12,464
如果你在define区设定了自定义效果编号

114
00:04:12,564 --> 00:04:13,587
也可以使用它

115
00:04:13,687 --> 00:04:15,191
现在我们再运行

116
00:04:16,941 --> 00:04:17,522
点鼠标

117
00:04:18,011 --> 00:04:20,116
我们就可以看到游戏窗口左上方的精灵了

118
00:04:20,216 --> 00:04:22,130
幸亏我们加上了:a;

119
00:04:22,230 --> 00:04:24,249
否则看到的精灵就是正方形的了

120
00:04:24,763 --> 00:04:25,789
既然这是一个精灵

121
00:04:25,889 --> 00:04:28,249
那么它就是可以独立于背景进行移动的

122
00:04:28,703 --> 00:04:30,707
用来移动精灵的命令叫msp

123
00:04:31,576 --> 00:04:32,307
它有三个参数

124
00:04:32,680 --> 00:04:34,746
第一个参数是我们要操作的精灵的编号

125
00:04:34,846 --> 00:04:37,315
之前lsp的时候我们给它了1号编号

126
00:04:37,415 --> 00:04:38,402
那么这里就是1

127
00:04:39,169 --> 00:04:42,031
第二个参数是相对与原来位置的横坐标

128
00:04:42,512 --> 00:04:44,822
比如我要让它向右移动100像素

129
00:04:44,922 --> 00:04:45,872
就写一百

130
00:04:47,203 --> 00:04:48,383
向左移动就是负数

131
00:04:48,678 --> 00:04:50,698
第三个参数是相对纵坐标

132
00:04:51,298 --> 00:04:53,460
向下移动100像素就写100

133
00:04:53,560 --> 00:04:55,059
向上移动就是负数

134
00:04:55,517 --> 00:04:57,388
msp之后同样要刷新

135
00:04:57,488 --> 00:04:58,388
print 1

136
00:04:58,488 --> 00:05:00,110
表示没有特效立即刷新

137
00:05:00,210 --> 00:05:02,273
然后再click

138
00:05:03,071 --> 00:05:04,233
保存 运行

139
00:05:07,082 --> 00:05:08,709
这样在点第二次的时候

140
00:05:08,809 --> 00:05:10,594
这个精灵就会往下移动100像素

141
00:05:11,096 --> 00:05:12,549
往右也移动100像素

142
00:05:12,996 --> 00:05:15,954
但是有时候我们会想使用绝对坐标而不是相对坐标

143
00:05:16,519 --> 00:05:18,245
这时候就要使用amsp

144
00:05:18,557 --> 00:05:20,355
参数的个数跟msp一样

145
00:05:20,791 --> 00:05:22,207
只是它在处理坐标的时候

146
00:05:22,307 --> 00:05:23,427
会当作绝对坐标

147
00:05:23,527 --> 00:05:26,022
比如我在原来的msp改成amsp

148
00:05:26,397 --> 00:05:28,526
精灵就会移动到100,100的位置

149
00:05:28,626 --> 00:05:30,613
而不是在原来位置的基础上移动

150
00:05:30,713 --> 00:05:31,485
我们来看一下

151
00:05:37,308 --> 00:05:39,181
那么在精灵结束了它的任务之后

152
00:05:39,587 --> 00:05:40,600
我们想让它消失

153
00:05:40,700 --> 00:05:42,684
这个时候就用csp命令

154
00:05:43,180 --> 00:05:44,065
它只有一个参数

155
00:05:44,165 --> 00:05:45,150
那就是精灵的编号

156
00:05:45,250 --> 00:05:45,855
我写1

157
00:05:45,955 --> 00:05:47,494
它就会把1号精灵清除掉

158
00:05:47,911 --> 00:05:50,133
同样的 csp命令也不会自动刷新

159
00:05:50,449 --> 00:05:51,473
需要在后面print

160
00:05:55,359 --> 00:05:56,406
那么我们看一下

161
00:06:00,026 --> 00:06:01,173
在点第三次之后

162
00:06:01,612 --> 00:06:03,045
精灵就从屏幕上消失了

163
00:06:04,475 --> 00:06:06,933
有时候我们想让精灵在屏幕上隐藏一段时间

164
00:06:07,033 --> 00:06:08,790
而之后需要再显示出来

165
00:06:09,156 --> 00:06:14,420
我们可以使用csp把精灵清除掉再在让它重新显示的时候重来一遍lsp

166
00:06:14,520 --> 00:06:15,767
但这样很没效率

167
00:06:15,867 --> 00:06:18,137
所以vsp命令在这种时候就很有用了

168
00:06:20,986 --> 00:06:22,287
vsp有两个参数

169
00:06:22,387 --> 00:06:23,850
第一个是精灵的编号

170
00:06:24,135 --> 00:06:26,013
第二个是是否为显示状态的标记

171
00:06:26,113 --> 00:06:28,156
1表示显示 0表示隐藏

172
00:06:28,256 --> 00:06:29,041
我这里用0

173
00:06:29,845 --> 00:06:30,796
它就会被隐藏起来

174
00:06:30,896 --> 00:06:32,293
还是一样要刷新

175
00:06:36,736 --> 00:06:41,533
再在后面写上vsp 1,1让它重新显示出来

176
00:06:41,633 --> 00:06:45,694
print click

177
00:06:46,689 --> 00:06:47,638
看一下效果

178
00:06:54,073 --> 00:06:57,361
有时候我们需要让精灵刚被放到屏幕上的时候就被隐藏起来

179
00:06:57,461 --> 00:06:58,591
我们可以写两行

180
00:06:58,691 --> 00:07:02,183
lsp和vsp 1,0

181
00:07:02,283 --> 00:07:05,338
但是仍有更方便的方法叫做lsph

182
00:07:08,577 --> 00:07:10,163
参数跟lsp一样

183
00:07:10,263 --> 00:07:13,894
只是它在加载精灵图片的时候直接就是处于隐藏状态的

184
00:07:14,105 --> 00:07:15,931
这是一些精灵的基本操作

185
00:07:16,201 --> 00:07:18,106
我想到了3个大家可能会遇到的问题

186
00:07:18,575 --> 00:07:19,406
第一个问题是

187
00:07:19,628 --> 00:07:20,403
这么多命令

188
00:07:20,503 --> 00:07:22,425
还都是不明所以的英文

189
00:07:22,525 --> 00:07:23,480
什么sp之类的

190
00:07:23,580 --> 00:07:24,448
太难记忆了

191
00:07:24,982 --> 00:07:25,686
这个好解决

192
00:07:25,786 --> 00:07:27,733
因为这些命令的名字都不是无意义的

193
00:07:27,833 --> 00:07:28,979
而是英文的缩写

194
00:07:29,416 --> 00:07:30,490
顺便普及一下英语

195
00:07:31,095 --> 00:07:32,568
sp就代表sprite

196
00:07:32,916 --> 00:07:33,683
精灵的意思

197
00:07:33,783 --> 00:07:34,587
跟elf不一样

198
00:07:34,836 --> 00:07:36,388
elf是长着尖耳朵的精灵

199
00:07:36,488 --> 00:07:37,874
sprite才是我们用到的精灵

200
00:07:38,765 --> 00:07:41,215
lsp的l就代表load 加载的意思

201
00:07:41,490 --> 00:07:44,060
msp的m就代表move 移动的意思

202
00:07:44,160 --> 00:07:47,594
amsp的a就代表absolute 绝对的意思

203
00:07:47,694 --> 00:07:51,263
csp的c就代表clear 清除的意思

204
00:07:51,363 --> 00:07:54,338
vsp的v就代表visible 可见的意思

205
00:07:54,871 --> 00:07:58,489
lsph的h就代表hidden 隐藏的意思

206
00:07:59,025 --> 00:08:01,146
如果你的英语不好可能还是很难记住

207
00:08:01,246 --> 00:08:05,339
但是我觉得英语单词相对来说肯定要比一堆读不了的字母好记

208
00:08:05,803 --> 00:08:06,659
好好学习英语吧！

209
00:08:06,759 --> 00:08:08,223
ONScripter可是日本人做的！

210
00:08:08,471 --> 00:08:11,282
第二个问题是有些人可能会认为lsp之后

211
00:08:11,382 --> 00:08:12,291
print之前

212
00:08:12,391 --> 00:08:14,174
精灵是处于隐藏状态的

213
00:08:14,510 --> 00:08:15,476
实际上并不是

214
00:08:15,576 --> 00:08:17,794
lsp之后精灵是处于显示状态的

215
00:08:17,794 --> 00:08:19,125
至少在内存中是如此

216
00:08:19,225 --> 00:08:22,065
而vsp所更改的是精灵在内存中的显示状态

217
00:08:22,511 --> 00:08:27,227
事实上所有关于精灵的操作命令都只是更改其在内存中的状态

218
00:08:27,521 --> 00:08:30,985
就像在bg或ld之后使用0号效果编号一样

219
00:08:31,244 --> 00:08:32,813
不管你在内存中怎么操作

220
00:08:32,913 --> 00:08:35,747
都需要等到屏幕刷新的时候才会显示到屏幕上

221
00:08:36,262 --> 00:08:38,723
bg和ld命令是会自动刷新屏幕的

222
00:08:39,066 --> 00:08:40,562
而操作精灵的命令不会

223
00:08:40,662 --> 00:08:41,683
必须手动刷新

224
00:08:41,783 --> 00:08:43,073
也就是使用print命令

225
00:08:43,249 --> 00:08:45,275
这是因为精灵通常都不会单独出现

226
00:08:45,650 --> 00:08:47,820
而是进行了一大堆操作之后再让它显示出来

227
00:08:47,920 --> 00:08:49,772
如果这些操作每次都刷新一下

228
00:08:49,772 --> 00:08:50,992
对电脑的性能消耗很大

229
00:08:51,231 --> 00:08:53,032
每次再后面加0也不方便

230
00:08:53,132 --> 00:08:54,891
所以操作精灵的命令不会自动刷新

231
00:08:55,227 --> 00:08:56,286
第三个问题是

232
00:08:56,386 --> 00:08:57,678
如果两个精灵重叠了

233
00:08:57,778 --> 00:08:59,804
哪个在前哪个在后呢？

234
00:09:00,210 --> 00:09:01,192
我们来实验一下

235
00:09:01,292 --> 00:09:11,915
先lsp 1,":a;google-chrome.png",200,200

236
00:09:13,071 --> 00:09:15,996
让它在200,200的位置显示Chrome的图标

237
00:09:16,329 --> 00:09:26,776
再lsp 2,":a;firefox.png",220,220

238
00:09:26,900 --> 00:09:29,784
让它在220,220的位置显示Firefox的图标

239
00:09:30,288 --> 00:09:32,659
比Chrome图标低且靠右20像素

240
00:09:33,655 --> 00:09:35,340
print 1

241
00:09:36,559 --> 00:09:37,364
click

242
00:09:37,464 --> 00:09:38,373
保存看一下

243
00:09:40,147 --> 00:09:41,421
两个图标显示出来了

244
00:09:41,605 --> 00:09:43,099
Chrome在Firefox的前面

245
00:09:43,431 --> 00:09:45,803
是什么决定了Chrome在Firefox的前面呢？

246
00:09:46,273 --> 00:09:47,215
lsp的顺序？

247
00:09:47,677 --> 00:09:48,164
不对

248
00:09:48,164 --> 00:09:50,727
决定精灵前后的关键是精灵的编号

249
00:09:51,195 --> 00:09:52,906
数字越小 就在越前面

250
00:09:53,228 --> 00:09:55,222
如果我把Chrome的编号改成2

251
00:09:55,322 --> 00:09:57,134
Firefox的编号改成1

252
00:09:57,234 --> 00:10:02,045
这样Firefox就会在Chrome的前面 因为它的编号数字要小

253
00:10:02,593 --> 00:10:03,504
另外再次重申

254
00:10:03,604 --> 00:10:06,169
两个编号相同的精灵不能同时存在！

255
00:10:06,269 --> 00:10:07,787
因为编号决定了精灵的先后

256
00:10:07,887 --> 00:10:12,426
所以编号有时也被称为除X横轴和Y竖轴之外的Z轴

257
00:10:14,268 --> 00:10:15,358
那么这一讲就是这些

258
00:10:15,458 --> 00:10:17,909
素材都已经上传到视频介绍中的链接里了

259
00:10:18,009 --> 00:10:21,119
感谢KDE e.V.带来的精美Chrome和Firefox图标

260
00:10:21,632 --> 00:10:23,321
最后感谢大家的支持和耐心等待

261
00:10:23,421 --> 00:10:25,602
喜欢我的视频就给个硬币并推荐给朋友吧

262
00:10:25,977 --> 00:10:29,355
觉得我的视频做的不够好也可以给我发邮件提出你的意见或建议

263
00:10:29,722 --> 00:10:31,425
下一讲就是发挥精灵实力的时候

264
00:10:31,685 --> 00:10:33,292
我们来做一个精美的标题画面

265
00:10:33,392 --> 00:10:34,392
因为内容比较多

266
00:10:34,492 --> 00:10:35,777
所以可能会持续好几讲

267
00:10:36,195 --> 00:10:37,371
总之我们下期再见！

