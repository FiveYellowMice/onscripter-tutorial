大家好，这里是FiveYellowMice给大家带来的小白也能学会的Galgame制作的第8讲。如果你是第一次看到这个系列的视频，建议你先从第0讲开始看，点一下UP主的头像或者ID就可以找到了。那么这一讲我们就将开始迈入精灵的殿堂，以后我们几乎所有的工作都与这个精灵有关。一个游戏如果没有精灵——就像我们之前所做的那些一样——是单调乏味的。
那么这个精灵究竟是什么呢？大多数人看到“精灵”这个词都会想到这个……不过我在这里说的显然不是它了，而是这个……简单来说就是在屏幕上可以移动的图片，举个例子，在“吃豆人”游戏中，这个迷宫是背景，而吃豆人本体、敌人以及被吃的这些豆子都是精灵。如果还不理解请像我一样查看维基百科。
那么有了精灵，我们就可以作出好看的标题画面、菜单、文字框，还有其他什么别的东西。精灵是一个十分有力的工具，但是为了得到精灵的力量，我们必须付出更多的努力，来掌握它的使用方法。

首先我们创建一个目录，把主程序、字体都放进去，再新建0.txt，编码改成GBK，*define, game, *start，先设定一个背景，我懒得找图片了就写white好了，10号渐变效果，500毫秒。回车，这时我想让它在不显示文字的情况下暂停，需要一下鼠标才能继续，这就要用到click命令。最后end，保存，运行。这样它在显示完背景之后，就会执行到click命令，点一下鼠标，就往下执行到了end命令，于是就结束了。
在让精灵出现之前，我们得准备好一张图片，我已经事先在素材中帮大家找好了两张图片，现在把它们复制过来，这张图片通常就是PNG格式，跟立绘一样，里面可以包含一个Alpha层来让图片中的某些部分变透明。我们可以看到，这些像国际棋盘格子的地方就是透明的部分。

我们现在就可以目睹一下精灵的真面目了！在click之后，我们来使用lsp命令，这条命令就是让我们在屏幕上加载一个精灵，它有4个参数，第一个参数是精灵的编号，对，编号，这是一个新的概念。精灵跟立绘不一样，立绘只要用简单的l(左) c(中) r(右)就可以让ONScripter知道你要操作的是哪个立绘，而精灵的位置不固定，甚至可以有两个精灵在同一个位置上，所以我们需要用一个数字来代表一个特定的精灵，方便以后对精灵的操作。编号不能够重复，如果有两次lsp使用了同样的编号，那么后来执行的lsp就会把之前的lsp的成果毁掉。
第2个参数是精灵的图片文件路径，我这里就用google-chrome.png，刚刚给大家看过这张图片。记住要用半角双引号包起来。
第3个参数是精灵的横坐标，在讲文字框的时候有提到，是精灵的左上角与游戏窗口左端的距离，以像素为单位。第4个参数是纵坐标，也同理，是精灵的左上角与游戏窗口顶端的距离。我在这里写200,200。
lsp命令写完了之后，是否有感觉漏掉了什么？对，跟立绘一样，要让ONScripter使用PNG图片的Alpha层，得在文件路径前，引号之内，加上:a;，否则这张图片的Alpha层就会被忽略。
这样，在click之后，精灵就会被放到屏幕上，我们在后面再加上一个click，否则在精灵刚出来的时候，ONScripter就退出了。
那现在运行……点鼠标……精灵没有出现，再点，游戏就结束了。这是为什么？我的代码写错了吗？
事实上，我们的代码并没有写错，精灵确实在lsp的时候被加载到了屏幕上，但是它仅仅是被“加载”到了屏幕上，并没有被显示到屏幕上。我们需要刷新一下屏幕才能让它显示出来，这也就是lsp命令没有效果参数的原因。我们在这后面加上一条print命令，print命令的参数就是效果编号，我还是用我最喜欢的渐变500毫秒（10,500），如果你在define区设定了自定义效果编号，也可以使用它。
现在我们再运行，点鼠标，我们就可以看到游戏窗口左上角的精灵了。幸亏我们加上了:a;，否则看到的精灵就是方形的了。

既然这是一个精灵，那么它就是可以独立于背景进行移动的。用来移动精灵的命令叫msp，它有三个参数，第一个参数是我们要操作的精灵的编号，之前lsp的时候我们给它了1号编号，那么这里就是1。第二个参数是相对与原来位置的横坐标，比如我要让它向右移动100像素，就写一百，向左移动就是负数。第三个参数是相对纵坐标，向下移动100像素就是100，向上移动就是负数。
msp之后同样要刷新，print 1，表示没有特效立即刷新，然后click。保存，运行……这样在点第二次的时候，这个精灵就会往下移动100像素，往右移动100像素。
但是有时候我们会想使用绝对坐标而不是相对坐标，这时候就要使用amsp，参数的个数跟msp一样，只是它在处理坐标的时候，会当作绝对坐标，比如我在原来的msp改成amsp，精灵就会移动到100,100的位置，而不是在原来位置的基础上移动。我们来看一下……
那么在精灵结束了它的任务之后，我们想让它消失，这个时候就用csp命令。它只有一个参数，那就是精灵的编号，我写1，它就会把1号精灵清除掉。同样的，csp命令也不会自动刷新，需要在后面print。那么我们看一下……在点第三次之后，精灵就从屏幕上消失了。
有时候我们想让精灵在屏幕上隐藏一段时间，而之后需要再显示出来，我们可以使用csp把精灵清除掉再在让它重新显示的时候重来一遍lsp。但这样很没效率，所以vsp命令在这种时候就有用了。vsp有两个参数，第一个是精灵的编号，第二个是是否为显示状态的标记，1表示显示，0表示隐藏。我这里用0，它就会被隐藏起来，还是一样要刷新。再在后面写上vsp 1,1让它重新显示出来，print，click。看一下效果……
有时候我们需要让精灵刚被放到屏幕上的时候就被隐藏起来，我们可以写两行，lsp和vsp 1,0。但仍有更方便的方法lsph，参数跟lsp一样，只是它在加载精灵图片的时候直接就是处于隐藏状态的。

这是一些精灵的基本操作。我想到了3个大家可能会遇到的问题，第一个问题是：这么多命令，还都是不明所以的英文，什么sp之类的，太难记忆了。这个好解决，因为这些命令的名字都不是无意义的，而是英文的缩写，顺便普及一下英语。sp就代表sprite，精灵的意思，跟elf不一样，elf是长着尖耳朵的精灵，sprite才是我们用到的精灵。lsp的l就代表load，加载的意思。msp的m就代表move，移动的意思。amsp的a就代表absolute，绝对的意思。csp的c就代表clear，清除的意思。vsp的v就代表visible，可见的意思。lsph的h就代表hidden，隐藏的意思。如果你的英语不好可能还是很难记住，但是我觉得英语单词相对来说肯定要比一堆读不了的字母好记。好好学习英语吧！ONScripter可是日本人做的！
第二个问题是有些人可能会认为lsp之后，print之前，精灵是处于隐藏状态的。实际上并不是，lsp之后精灵是处于显示状态的，至少在内存中是如此，而vsp所更改的是精灵在内存中的显示状态。事实上所有关于精灵的操作命令都只是更改其在内存中的状态，就像在bg或ld之后使用0号效果编号一样，不管你在内存中怎么操作，都需要等到屏幕刷新的时候才会显示到屏幕上。bg和ld命令是会自动刷新屏幕的，而操作精灵的命令不会，必须手动刷新，也就是使用print命令。这是因为精灵通常都不会单独出现，而是进行了一大堆操作之后再让它显示出来，如果这些操作每次都刷新一下，对电脑的性能消耗很大，每次再后面加0也不方便，所以操作精灵的命令不会自动刷新。

第三个问题是，如果两个精灵重叠了，哪个在前哪个在后呢？我们来实验一下，先lsp 1,":a;google-chrome.png",200,200让它在200,200的位置显示Chrome的图标，再lsp 2,":a;firefox.png",220,220让它在220,220的位置显示Firefox的图标，比Chrome图标低且靠右20像素。print 1，click。保存看一下……
两个图标显示出来了，Chrome在Firefox的前面，是什么决定了Chrome在Firefox的前面呢？lsp的顺序？不对，决定精灵前后的关键是精灵的编号，数字越小，就在越前面。如果我把Chrome的编号改成2，Firefox的编号改成1……这样Firefox就会在Chrome的前面，因为它的编号数字要小。另外再次重申，两个编号相同的精灵不能同时存在！
因为编号决定了精灵的先后，所以编号有时也被称为除X横轴和Y竖轴之外的Z轴。

那么这一讲就是这些，素材都已经上传到视频介绍中的链接里了，感谢KDE e.V.带来的精美Chrome和Firefox图标。
最后感谢大家的支持和耐心等待，喜欢我的视频就给个硬币并推荐给朋友吧。觉得我的视频做的不够好也可以给我发邮件提出你的意见或建议。下一讲就是发挥精灵实力的时候，我们来做一个精美的标题画面，因为内容比较多，所以可能会持续好几讲。总之我们下期再见！